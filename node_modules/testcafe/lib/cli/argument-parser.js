"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const commander_1 = require("commander");
const dedent_1 = __importDefault(require("dedent"));
const read_file_relative_1 = require("read-file-relative");
const runtime_1 = require("../errors/runtime");
const types_1 = require("../errors/types");
const type_assertions_1 = require("../errors/runtime/type-assertions");
const get_viewport_width_1 = __importDefault(require("../utils/get-viewport-width"));
const string_1 = require("../utils/string");
const get_options_1 = require("../utils/get-options");
const get_filter_fn_1 = __importDefault(require("../utils/get-filter-fn"));
const screenshot_option_names_1 = __importDefault(require("../configuration/screenshot-option-names"));
const run_option_names_1 = __importDefault(require("../configuration/run-option-names"));
const REMOTE_ALIAS_RE = /^remote(?::(\d*))?$/;
const DESCRIPTION = dedent_1.default(`
    In the browser list, you can use browser names (e.g. "ie", "chrome", etc.) as well as paths to executables.

    To run tests against all installed browsers, use the "all" alias.

    To use a remote browser connection (e.g., to connect a mobile device), specify "remote" as the browser alias.
    If you need to connect multiple devices, add a colon and the number of browsers you want to connect (e.g., "remote:3").

    To run tests in a browser accessed through a browser provider plugin, specify a browser alias that consists of two parts - the browser provider name prefix and the name of the browser itself; for example, "saucelabs:chrome@51".

    You can use one or more file paths or glob patterns to specify which tests to run.

    More info: https://devexpress.github.io/testcafe/documentation
`);
class CLIArgumentParser {
    constructor(cwd) {
        this.program = new commander_1.Command('testcafe');
        this.experimental = new commander_1.Command('testcafe-experimental');
        this.cwd = cwd || process.cwd();
        this.remoteCount = 0;
        this.opts = {};
        this.args = [];
        this._describeProgram();
    }
    static _parsePortNumber(value) {
        type_assertions_1.assertType(type_assertions_1.is.nonNegativeNumberString, null, 'Port number', value);
        return parseInt(value, 10);
    }
    static _getDescription() {
        // NOTE: add empty line to workaround commander-forced indentation on the first line.
        return '\n' + string_1.wordWrap(DESCRIPTION, 2, get_viewport_width_1.default(process.stdout));
    }
    _describeProgram() {
        const version = JSON.parse(read_file_relative_1.readSync('../../package.json')).version;
        this.program
            .version(version, '-v, --version')
            .usage('[options] <comma-separated-browser-list> <file-or-glob ...>')
            .description(CLIArgumentParser._getDescription())
            .option('-b, --list-browsers [provider]', 'output the aliases for local browsers or browsers available through the specified browser provider')
            .option('-r, --reporter <name[:outputFile][,...]>', 'specify the reporters and optionally files where reports are saved')
            .option('-s, --screenshots <option=value[,...]>', 'specify screenshot options')
            .option('-S, --screenshots-on-fails', 'take a screenshot whenever a test fails')
            .option('-p, --screenshot-path-pattern <pattern>', 'use patterns to compose screenshot file names and paths: ${BROWSER}, ${BROWSER_VERSION}, ${OS}, etc.')
            .option('-q, --quarantine-mode', 'enable the quarantine mode')
            .option('-d, --debug-mode', 'execute test steps one by one pausing the test after each step')
            .option('-e, --skip-js-errors', 'make tests not fail when a JS error happens on a page')
            .option('-u, --skip-uncaught-errors', 'ignore uncaught errors and unhandled promise rejections, which occur during test execution')
            .option('-t, --test <name>', 'run only tests with the specified name')
            .option('-T, --test-grep <pattern>', 'run only tests matching the specified pattern')
            .option('-f, --fixture <name>', 'run only fixtures with the specified name')
            .option('-F, --fixture-grep <pattern>', 'run only fixtures matching the specified pattern')
            .option('-a, --app <command>', 'launch the tested app using the specified command before running tests')
            .option('-c, --concurrency <number>', 'run tests concurrently')
            .option('-L, --live', 'enable live mode. In this mode, TestCafe watches for changes you make in the test files. These changes immediately restart the tests so that you can see the effect.')
            .option('--test-meta <key=value[,key2=value2,...]>', 'run only tests with matching metadata')
            .option('--fixture-meta <key=value[,key2=value2,...]>', 'run only fixtures with matching metadata')
            .option('--debug-on-fail', 'pause the test if it fails')
            .option('--app-init-delay <ms>', 'specify how much time it takes for the tested app to initialize')
            .option('--selector-timeout <ms>', 'specify the time within which selectors make attempts to obtain a node to be returned')
            .option('--assertion-timeout <ms>', 'specify the time within which assertion should pass')
            .option('--page-load-timeout <ms>', 'specify the time within which TestCafe waits for the `window.load` event to fire on page load before proceeding to the next test action')
            .option('--page-request-timeout <ms>', "specifies the timeout in milliseconds to complete the request for the page's HTML")
            .option('--ajax-request-timeout <ms>', 'specifies the timeout in milliseconds to complete the AJAX requests (XHR or fetch)')
            .option('--speed <factor>', 'set the speed of test execution (0.01 ... 1)')
            .option('--ports <port1,port2>', 'specify custom port numbers')
            .option('--hostname <name>', 'specify the hostname')
            .option('--proxy <host>', 'specify the host of the proxy server')
            .option('--proxy-bypass <rules>', 'specify a comma-separated list of rules that define URLs accessed bypassing the proxy server')
            .option('--ssl <options>', 'specify SSL options to run TestCafe proxy server over the HTTPS protocol')
            .option('--video <path>', 'record videos of test runs')
            .option('--video-options <option=value[,...]>', 'specify video recording options')
            .option('--video-encoding-options <option=value[,...]>', 'specify encoding options')
            .option('--dev', 'enables mechanisms to log and diagnose errors')
            .option('--qr-code', 'outputs QR-code that repeats URLs used to connect the remote browsers')
            .option('--sf, --stop-on-first-fail', 'stop an entire test run if any test fails')
            .option('--ts-config-path <path>', 'use a custom TypeScript configuration file and specify its location')
            .option('--cs, --client-scripts <paths>', 'inject scripts into tested pages', this._parseList, [])
            .option('--disable-page-caching', 'disable page caching during test execution')
            .option('--disable-page-reloads', 'disable page reloads between tests')
            .option('--retry-test-pages', 'retry network requests to test pages during test execution')
            .option('--disable-screenshots', 'disable screenshots')
            .option('--screenshots-full-page', 'enable full-page screenshots')
            .option('--compiler-options <option=value[,...]>', 'specify test file compiler options')
            // NOTE: these options will be handled by chalk internally
            .option('--color', 'force colors in command line')
            .option('--no-color', 'disable colors in command line');
        // NOTE: temporary hide experimental options from --help command
        this.experimental
            .allowUnknownOption()
            .option('--disable-multiple-windows', 'disable multiple windows mode')
            .option('--experimental-compiler-service', 'run compiler in a separate process');
    }
    _parseList(val) {
        return val.split(',');
    }
    _checkAndCountRemotes(browser) {
        const remoteMatch = browser.match(REMOTE_ALIAS_RE);
        if (remoteMatch) {
            this.remoteCount += parseInt(remoteMatch[1], 10) || 1;
            return false;
        }
        return true;
    }
    async _parseFilteringOptions() {
        if (this.opts.testGrep)
            this.opts.testGrep = get_options_1.getGrepOptions('--test-grep', this.opts.testGrep);
        if (this.opts.fixtureGrep)
            this.opts.fixtureGrep = get_options_1.getGrepOptions('--fixture-grep', this.opts.fixtureGrep);
        if (this.opts.testMeta)
            this.opts.testMeta = await get_options_1.getMetaOptions('--test-meta', this.opts.testMeta);
        if (this.opts.fixtureMeta)
            this.opts.fixtureMeta = await get_options_1.getMetaOptions('--fixture-meta', this.opts.fixtureMeta);
        this.opts.filter = get_filter_fn_1.default(this.opts);
    }
    _parseAppInitDelay() {
        if (this.opts.appInitDelay) {
            type_assertions_1.assertType(type_assertions_1.is.nonNegativeNumberString, null, 'Tested app initialization delay', this.opts.appInitDelay);
            this.opts.appInitDelay = parseInt(this.opts.appInitDelay, 10);
        }
    }
    _parseSelectorTimeout() {
        if (this.opts.selectorTimeout) {
            type_assertions_1.assertType(type_assertions_1.is.nonNegativeNumberString, null, 'Selector timeout', this.opts.selectorTimeout);
            this.opts.selectorTimeout = parseInt(this.opts.selectorTimeout, 10);
        }
    }
    _parseAssertionTimeout() {
        if (this.opts.assertionTimeout) {
            type_assertions_1.assertType(type_assertions_1.is.nonNegativeNumberString, null, 'Assertion timeout', this.opts.assertionTimeout);
            this.opts.assertionTimeout = parseInt(this.opts.assertionTimeout, 10);
        }
    }
    _parsePageLoadTimeout() {
        if (this.opts.pageLoadTimeout) {
            type_assertions_1.assertType(type_assertions_1.is.nonNegativeNumberString, null, 'Page load timeout', this.opts.pageLoadTimeout);
            this.opts.pageLoadTimeout = parseInt(this.opts.pageLoadTimeout, 10);
        }
    }
    _parsePageRequestTimeout() {
        if (!this.opts.pageRequestTimeout)
            return;
        type_assertions_1.assertType(type_assertions_1.is.nonNegativeNumberString, null, 'Page request timeout', this.opts.pageRequestTimeout);
        this.opts.pageRequestTimeout = parseInt(this.opts.pageRequestTimeout, 10);
    }
    _parseAjaxRequestTimeout() {
        if (!this.opts.ajaxRequestTimeout)
            return;
        type_assertions_1.assertType(type_assertions_1.is.nonNegativeNumberString, null, 'Ajax request timeout', this.opts.ajaxRequestTimeout);
        this.opts.ajaxRequestTimeout = parseInt(this.opts.ajaxRequestTimeout, 10);
    }
    _parseSpeed() {
        if (this.opts.speed)
            this.opts.speed = parseFloat(this.opts.speed);
    }
    _parseConcurrency() {
        if (this.opts.concurrency)
            this.opts.concurrency = parseInt(this.opts.concurrency, 10);
    }
    _parsePorts() {
        if (this.opts.ports) {
            const parsedPorts = this.opts.ports /* eslint-disable-line no-extra-parens */
                .split(',')
                .map(CLIArgumentParser._parsePortNumber);
            if (parsedPorts.length < 2)
                throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.portsOptionRequiresTwoNumbers);
            this.opts.ports = parsedPorts;
        }
    }
    _parseBrowsersFromArgs() {
        const browsersArg = this.program.args[0] || '';
        this.opts.browsers = string_1.splitQuotedText(browsersArg, ',')
            .filter(browser => browser && this._checkAndCountRemotes(browser));
    }
    async _parseSslOptions() {
        if (this.opts.ssl)
            this.opts.ssl = await get_options_1.getSSLOptions(this.opts.ssl);
    }
    async _parseReporters() {
        const reporters = this.opts.reporter ? this.opts.reporter.split(',') : []; /* eslint-disable-line no-extra-parens*/
        this.opts.reporter = reporters.map((reporter) => {
            const separatorIndex = reporter.indexOf(':');
            if (separatorIndex < 0)
                return { name: reporter };
            const name = reporter.substring(0, separatorIndex);
            const output = reporter.substring(separatorIndex + 1);
            return { name, output };
        });
    }
    _parseFileList() {
        this.opts.src = this.program.args.slice(1);
    }
    async _parseScreenshotOptions() {
        if (this.opts.screenshots)
            this.opts.screenshots = await get_options_1.getScreenshotOptions(this.opts.screenshots);
        else
            this.opts.screenshots = {};
        if (!lodash_1.has(this.opts.screenshots, screenshot_option_names_1.default.pathPattern) && this.opts.screenshotPathPattern)
            this.opts.screenshots[screenshot_option_names_1.default.pathPattern] = this.opts.screenshotPathPattern;
        if (!lodash_1.has(this.opts.screenshots, screenshot_option_names_1.default.takeOnFails) && this.opts.screenshotsOnFails)
            this.opts.screenshots[screenshot_option_names_1.default.takeOnFails] = this.opts.screenshotsOnFails;
    }
    async _parseVideoOptions() {
        if (this.opts.videoOptions)
            this.opts.videoOptions = await get_options_1.getVideoOptions(this.opts.videoOptions);
        if (this.opts.videoEncodingOptions)
            this.opts.videoEncodingOptions = await get_options_1.getVideoOptions(this.opts.videoEncodingOptions);
    }
    async _parseCompilerOptions() {
        if (!this.opts.compilerOptions)
            return;
        const parsedCompilerOptions = await get_options_1.getCompilerOptions(this.opts.compilerOptions);
        const resultCompilerOptions = Object.create(null);
        for (const [key, value] of Object.entries(parsedCompilerOptions))
            lodash_1.set(resultCompilerOptions, key, value);
        this.opts.compilerOptions = resultCompilerOptions;
    }
    _parseListBrowsers() {
        const listBrowserOption = this.opts.listBrowsers;
        this.opts.listBrowsers = !!this.opts.listBrowsers;
        if (!this.opts.listBrowsers)
            return;
        this.opts.providerName = typeof listBrowserOption === 'string' ? listBrowserOption : 'locally-installed';
    }
    async parse(argv) {
        this.program.parse(argv);
        this.experimental.parse(argv);
        this.args = this.program.args;
        this.opts = Object.assign(Object.assign({}, this.experimental.opts()), this.program.opts());
        this._parseListBrowsers();
        // NOTE: the '--list-browsers' option only lists browsers and immediately exits the app.
        // Therefore, we don't need to process other arguments.
        if (this.opts.listBrowsers)
            return;
        this._parseSelectorTimeout();
        this._parseAssertionTimeout();
        this._parsePageLoadTimeout();
        this._parsePageRequestTimeout();
        this._parseAjaxRequestTimeout();
        this._parseAppInitDelay();
        this._parseSpeed();
        this._parsePorts();
        this._parseBrowsersFromArgs();
        this._parseConcurrency();
        this._parseFileList();
        await this._parseFilteringOptions();
        await this._parseScreenshotOptions();
        await this._parseVideoOptions();
        await this._parseCompilerOptions();
        await this._parseSslOptions();
        await this._parseReporters();
    }
    getRunOptions() {
        const result = Object.create(null);
        run_option_names_1.default.forEach(optionName => {
            if (optionName in this.opts)
                // @ts-ignore a hack to add an index signature to interface
                result[optionName] = this.opts[optionName];
        });
        return result;
    }
}
exports.default = CLIArgumentParser;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,