"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_family_1 = __importDefault(require("os-family"));
const url_1 = require("url");
const base_1 = __importDefault(require("../base"));
const runtime_info_1 = __importDefault(require("./runtime-info"));
const config_1 = __importDefault(require("./config"));
const local_chrome_1 = require("./local-chrome");
const client_functions_1 = require("../../../utils/client-functions");
const browser_client_1 = require("./browser-client");
const MIN_AVAILABLE_DIMENSION = 50;
exports.default = Object.assign(Object.assign({}, base_1.default), { _getConfig(name) {
        return config_1.default(name);
    },
    _getBrowserProtocolClient(runtimeInfo) {
        return runtimeInfo.browserClient;
    },
    async _createRunTimeInfo(hostName, configString, disableMultipleWindows) {
        return runtime_info_1.default.create(hostName, configString, disableMultipleWindows);
    },
    _setUserAgentMetaInfoForEmulatingDevice(browserId, config) {
        const { emulation, deviceName } = config;
        const isDeviceEmulation = emulation && deviceName;
        if (!isDeviceEmulation)
            return;
        const metaInfo = `Emulating ${deviceName}`;
        const options = {
            appendToUserAgent: true
        };
        this.setUserAgentMetaInfo(browserId, metaInfo, options);
    },
    async openBrowser(browserId, pageUrl, configString, disableMultipleWindows) {
        const parsedPageUrl = url_1.parse(pageUrl);
        const runtimeInfo = await this._createRunTimeInfo(parsedPageUrl.hostname, configString, disableMultipleWindows);
        runtimeInfo.browserName = this._getBrowserName();
        runtimeInfo.browserId = browserId;
        runtimeInfo.providerMethods = {
            resizeLocalBrowserWindow: (...args) => this.resizeLocalBrowserWindow(...args)
        };
        await local_chrome_1.start(pageUrl, runtimeInfo);
        await this.waitForConnectionReady(browserId);
        runtimeInfo.viewportSize = await this.runInitScript(browserId, client_functions_1.GET_WINDOW_DIMENSIONS_INFO_SCRIPT);
        runtimeInfo.activeWindowId = null;
        runtimeInfo.windowDescriptors = {};
        if (!disableMultipleWindows)
            runtimeInfo.activeWindowId = this.calculateWindowId();
        const browserClient = new browser_client_1.BrowserClient(runtimeInfo);
        this.openedBrowsers[browserId] = runtimeInfo;
        await browserClient.init();
        await this._ensureWindowIsExpanded(browserId, runtimeInfo.viewportSize);
        this._setUserAgentMetaInfoForEmulatingDevice(browserId, runtimeInfo.config);
    },
    async closeBrowser(browserId) {
        const runtimeInfo = this.openedBrowsers[browserId];
        if (runtimeInfo.browserClient.isHeadlessTab())
            await runtimeInfo.browserClient.closeTab();
        else
            await this.closeLocalBrowser(browserId);
        if (os_family_1.default.mac || runtimeInfo.config.headless)
            await local_chrome_1.stop(runtimeInfo);
        if (runtimeInfo.tempProfileDir)
            await runtimeInfo.tempProfileDir.dispose();
        delete this.openedBrowsers[browserId];
    },
    async resizeWindow(browserId, width, height, currentWidth, currentHeight) {
        const runtimeInfo = this.openedBrowsers[browserId];
        if (runtimeInfo.config.mobile)
            await runtimeInfo.browserClient.updateMobileViewportSize();
        else {
            runtimeInfo.viewportSize.width = currentWidth;
            runtimeInfo.viewportSize.height = currentHeight;
        }
        await runtimeInfo.browserClient.resizeWindow({ width, height });
    },
    async getVideoFrameData(browserId) {
        const { browserClient } = this.openedBrowsers[browserId];
        return browserClient.getScreenshotData();
    },
    async hasCustomActionForBrowser(browserId) {
        const { config, browserClient } = this.openedBrowsers[browserId];
        const client = await browserClient.getActiveClient();
        return {
            hasCloseBrowser: true,
            hasResizeWindow: !!client && (config.emulation || config.headless),
            hasMaximizeWindow: !!client && config.headless,
            hasTakeScreenshot: !!client,
            hasChromelessScreenshots: !!client,
            hasGetVideoFrameData: !!client,
            hasCanResizeWindowToDimensions: false
        };
    },
    async _ensureWindowIsExpanded(browserId, { height, width, availableHeight, availableWidth, outerWidth, outerHeight }) {
        if (height < MIN_AVAILABLE_DIMENSION || width < MIN_AVAILABLE_DIMENSION) {
            const newHeight = Math.max(availableHeight, MIN_AVAILABLE_DIMENSION);
            const newWidth = Math.max(Math.floor(availableWidth / 2), MIN_AVAILABLE_DIMENSION);
            await this.resizeWindow(browserId, newWidth, newHeight, outerWidth, outerHeight);
        }
    } });
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,