"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserClient = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const chrome_remote_interface_1 = __importDefault(require("chrome-remote-interface"));
const client_functions_1 = require("../../../utils/client-functions");
const DOWNLOADS_DIR = path_1.default.join(os_1.default.homedir(), 'Downloads');
class BrowserClient {
    constructor(runtimeInfo) {
        this._clients = {};
        this._runtimeInfo = runtimeInfo;
        runtimeInfo.browserClient = this;
    }
    get _clientKey() {
        return this._runtimeInfo.activeWindowId || this._runtimeInfo.browserId;
    }
    get _config() {
        return this._runtimeInfo.config;
    }
    async _getTabs() {
        const tabs = await chrome_remote_interface_1.default.listTabs({ port: this._runtimeInfo.cdpPort });
        return tabs.filter(t => t.type === 'page');
    }
    async _getActiveTab() {
        let tabs = await this._getTabs();
        if (this._runtimeInfo.activeWindowId)
            tabs = tabs.filter(t => t.title.includes(this._runtimeInfo.activeWindowId));
        return tabs[0];
    }
    async _createClient() {
        const target = await this._getActiveTab();
        const client = await chrome_remote_interface_1.default({ target, port: this._runtimeInfo.cdpPort });
        const { Page, Network, Runtime } = client;
        this._clients[this._clientKey] = client;
        await Page.enable();
        await Network.enable({});
        await Runtime.enable();
        return client;
    }
    async _setupClient(client) {
        if (this._config.emulation)
            await this._setEmulation(client);
        if (this._config.headless)
            await this._setupDownloads(client);
    }
    async _setDeviceMetricsOverride(client, width, height, deviceScaleFactor, mobile) {
        await client.Emulation.setDeviceMetricsOverride({
            width,
            height,
            deviceScaleFactor,
            mobile,
            // @ts-ignore
            fitWindow: false
        });
    }
    async _setUserAgentEmulation(client) {
        if (this._config.userAgent === void 0)
            return;
        await client.Network.setUserAgentOverride({ userAgent: this._config.userAgent });
    }
    async _setTouchEmulation(client) {
        if (this._config.touch === void 0)
            return;
        const touchConfig = {
            enabled: this._config.touch,
            configuration: this._config.mobile ? 'mobile' : 'desktop',
            maxTouchPoints: 1
        };
        if (client.Emulation.setEmitTouchEventsForMouse)
            await client.Emulation.setEmitTouchEventsForMouse(touchConfig);
        if (client.Emulation.setTouchEmulationEnabled)
            await client.Emulation.setTouchEmulationEnabled(touchConfig);
    }
    async _setEmulation(client) {
        await this._setUserAgentEmulation(client);
        await this._setTouchEmulation(client);
        await this.resizeWindow({
            width: this._config.width,
            height: this._config.height
        });
    }
    async _setupDownloads(client) {
        await client.Page.setDownloadBehavior({
            behavior: 'allow',
            downloadPath: DOWNLOADS_DIR
        });
    }
    async _evaluateRuntime(client, expression, returnByValue = false) {
        return client.Runtime.evaluate({ expression, returnByValue });
    }
    async _calculateEmulatedDevicePixelRatio(client) {
        const devicePixelRatioQueryResult = await client.Runtime.evaluate({ expression: 'window.devicePixelRatio' });
        this._runtimeInfo.originalDevicePixelRatio = devicePixelRatioQueryResult.result.value;
        this._runtimeInfo.emulatedDevicePixelRatio = this._config.scaleFactor || this._runtimeInfo.originalDevicePixelRatio;
    }
    async resizeWindow(newDimensions) {
        const { browserId, config, viewportSize, providerMethods, emulatedDevicePixelRatio } = this._runtimeInfo;
        const currentWidth = viewportSize.width;
        const currentHeight = viewportSize.height;
        const newWidth = newDimensions.width || currentWidth;
        const newHeight = newDimensions.height || currentHeight;
        if (!config.headless)
            await providerMethods.resizeLocalBrowserWindow(browserId, newWidth, newHeight, currentWidth, currentHeight);
        viewportSize.width = newWidth;
        viewportSize.height = newHeight;
        const client = await this.getActiveClient();
        if (config.emulation) {
            await this._setDeviceMetricsOverride(client, viewportSize.width, viewportSize.height, emulatedDevicePixelRatio, config.mobile);
            await client.Emulation.setVisibleSize({ width: viewportSize.width, height: viewportSize.height });
        }
    }
    isHeadlessTab() {
        return !!this._parentTarget && this._config.headless;
    }
    async getActiveClient() {
        const client = this._clients[this._clientKey];
        if (client)
            return client;
        return this._createClient();
    }
    async init() {
        try {
            const tabs = await this._getTabs();
            this._parentTarget = tabs.find(t => t.url.includes(this._runtimeInfo.browserId));
            if (!this._parentTarget)
                return;
            const client = await this._createClient();
            await this._calculateEmulatedDevicePixelRatio(client);
            await this._setupClient(client);
        }
        catch (e) {
            return;
        }
    }
    async getScreenshotData(fullPage) {
        let viewportWidth = 0;
        let viewportHeight = 0;
        const { config, emulatedDevicePixelRatio } = this._runtimeInfo;
        const client = await this.getActiveClient();
        if (fullPage) {
            const { contentSize, visualViewport } = await client.Page.getLayoutMetrics();
            await this._setDeviceMetricsOverride(client, Math.ceil(contentSize.width), Math.ceil(contentSize.height), emulatedDevicePixelRatio, config.mobile);
            viewportWidth = visualViewport.clientWidth;
            viewportHeight = visualViewport.clientHeight;
        }
        const screenshotData = await client.Page.captureScreenshot({});
        if (fullPage) {
            if (config.emulation) {
                await this._setDeviceMetricsOverride(client, config.width || viewportWidth, config.height || viewportHeight, emulatedDevicePixelRatio, config.mobile);
            }
            else
                await client.Emulation.clearDeviceMetricsOverride();
        }
        return Buffer.from(screenshotData.data, 'base64');
    }
    async closeTab() {
        if (this._parentTarget)
            await chrome_remote_interface_1.default.closeTab({ id: this._parentTarget.id, port: this._runtimeInfo.cdpPort });
    }
    async updateMobileViewportSize() {
        const client = await this.getActiveClient();
        const windowDimensionsQueryResult = await this._evaluateRuntime(client, `(${client_functions_1.GET_WINDOW_DIMENSIONS_INFO_SCRIPT})()`, true);
        const windowDimensions = windowDimensionsQueryResult.result.value;
        this._runtimeInfo.viewportSize.width = windowDimensions.outerWidth;
        this._runtimeInfo.viewportSize.height = windowDimensions.outerHeight;
    }
}
exports.BrowserClient = BrowserClient;
//# sourceMappingURL=data:application/json;base64,